#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
  worker_connections  1024;
}


http {
  include       mime.types;
  default_type  application/octet-stream;
  charset       UTF-8;
  server_tokens off;

  log_format  main '{"status":$status,'
                    '"_time":"$time_iso8601",'
                    '"response_length":$body_bytes_sent,'
                    '"response_time":$request_time,'
                    '"remote":"$remote_addr",'
                    '"request_line":"$request",'
                    '"method":"$request_method",'
                    '"path":"$request_uri",'
                    '"request_length":$request_length,'
                    '"up":{"status":"$upstream_status","remote":"$upstream_addr","response_time":"$upstream_response_time"},'
                    '"request_id":"$request_uuid",'
                    '"ua":"$http_user_agent",'
                    '"referer":"$http_referer",'
                    '"x_forwarded_for":"$http_x_forwarded_for"'
                    '}';
  access_log  logs/access.log  main;

  sendfile          on;
  #tcp_nopush     on;
  keepalive_timeout 65;
  gzip              on;
  proxy_ignore_headers X-Accel-Redirect;
  resolver 8.8.8.8;


  lua_package_path "/opt/nginx/nginx/scripts/?.lua;/usr/share/nginx/scripts/?.lua;;";
  init_by_lua_file scripts/init.lua;


  server {
    listen       80;
    server_name  localhost;
    proxy_intercept_errors  on;
    set_by_lua $request_uuid 'return UUID()';

    location ~ ^/(media)(/?|/.*)$ {
      if ( $request_method = OPTIONS ) {
        rewrite ^/.+ /_options;
      }
      content_by_lua_file scripts/empry_content.lua;
    }

    # for static files.
    location / {
      if ( $request_method = OPTIONS ) {
        rewrite ^/ /_options;
      }
      root   html;
    }

    # for OPTIONS request.
    location = /_options {
      internal;
      content_by_lua_file scripts/process_options.lua;
    }
  }
}
